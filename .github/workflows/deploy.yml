name: Deploy

on:
  push:
    branches:
      - main

jobs:
  Deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Remove old files
        env:
          PRIVATE_KEY: ${{ secrets.AWS_EC2_SSH_KEY }}
          HOSTNAME: ${{secrets.AWS_EC2_IP}}
          USER_NAME: ${{secrets.USER_NAME}}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '

              # Now we have got the access of EC2 and we will start the deploy .
              rm -rf /home/ubuntu/node-app/microservice-template/*
              '

      - name: Copy new files
        env:
          PRIVATE_KEY: ${{ secrets.AWS_EC2_SSH_KEY }}
          HOSTNAME: ${{secrets.AWS_EC2_IP}}
          USER_NAME: ${{secrets.USER_NAME}}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          scp -o StrictHostKeyChecking=no -i private_key -r ./* ${USER_NAME}@${HOSTNAME}:/home/ubuntu/node-app/microservice-template

      - name: Deploy
        env:
          PRIVATE_KEY: ${{ secrets.AWS_EC2_SSH_KEY }}
          HOSTNAME: ${{secrets.AWS_EC2_IP}}
          USER_NAME: ${{secrets.USER_NAME}}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '

              # Now we have got the access of EC2 and we will start the deploy .
              docker-compose --profile deploy up --build -d
              '

# name: Deploy Microservice

# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       # Step 1: Checkout the repository
#       - name: Checkout repository
#         uses: actions/checkout@v2

#       # Step 2: Set up SSH key
#       - name: Set up SSH key
#         run: |
#           echo "${{ secrets.AWS_EC2_SSH_KEY }}" > ssh_key.pem
#           chmod 600 ssh_key.pem

#       # Step 3: Connect via SSH, remove old files, and copy new files
#       - name: Connect via SSH, remove old files, and copy new files
#         run: |
#           ssh -i ssh_key.pem ubuntu@${{ secrets.AWS_EC2_IP }} "rm -rf /home/ubuntu/node-app/microservice-template/*"
#           scp -i ssh_key.pem -r ./* ubuntu@${{ secrets.AWS_EC2_IP }}:/home/ubuntu/node-app/microservice-template
#           ssh -i ssh_key.pem ubuntu@${{ secrets.AWS_EC2_IP }} << EOF
#           cd /home/ubuntu/node-app/microservice-template
#           docker compose --profile deploy up --build -d
#           EOF
